import React, { useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { Send, Mic, User, FileText, BookOpen, HelpCircle, Book } from 'lucide-react-native';
import SahayakLogo from '@/components/SahayakLogo';
import { StorageService } from '@/utils/storage';
import FeatureTour, { FeatureTourStep } from '@/components/FeatureTour';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';

type DocumentType = 'worksheet' | 'quiz' | 'lesson-plan' | 'story';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  documentGenerated?: {
    type: DocumentType;
    title: string;
    content: string;
  };
}

export default function ChatScreen() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hello! I'm Sahayak AI, your teaching assistant. How can I help you create amazing classroom resources today?",
      isUser: false,
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef<ScrollView>(null);
  const router = useRouter();
  const [showTour, setShowTour] = React.useState(false);

  React.useEffect(() => {
    (async () => {
      const step = await AsyncStorage.getItem('featureTourStep');
      if (step === '0') setShowTour(true);
    })();
  }, []);

  const handleTourFinish = async () => {
    setShowTour(false);
    await AsyncStorage.setItem('featureTourStep', '1');
    router.replace('/documents');
  };

  const tourSteps: FeatureTourStep[] = [
    {
      title: 'Chat with Sahayak AI',
      description: 'Ask questions, generate worksheets, quizzes, lesson plans, and more instantly.',
      position: 'top',
      align: 'left',
    },
  ];

  const sendMessage = async () => {
    if (inputText.trim()) {
      const newMessage: Message = {
        id: Date.now().toString(),
        text: inputText,
        isUser: true,
        timestamp: new Date(),
      };

      setMessages(prev => [...prev, newMessage]);
      setInputText('');
      setIsTyping(true);

      // Simulate AI response
      setTimeout(() => {
        const aiResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: "I can help you create worksheets, quizzes, lesson plans, and educational stories. Would you like me to generate a specific type of resource for your class?",
          isUser: false,
          timestamp: new Date(),
        };
        setMessages(prev => [...prev, aiResponse]);
        setIsTyping(false);
      }, 2000);
    }
  };

  const generateQuickResource = async (type: DocumentType) => {
    const message = `Generate a ${type.replace('-', ' ')} for my class`;
    const newMessage: Message = {
      id: Date.now().toString(),
      text: message,
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, newMessage]);
    setIsTyping(true);

    setTimeout(async () => {
      const mockDocument = {
        id: Date.now().toString(),
        title: `${type.charAt(0).toUpperCase() + type.slice(1)} - Sample`,
        type,
        class: 'Class 8',
        subject: 'Mathematics',
        content: `This is a sample ${type} generated by Sahayak AI.`,
        questions: type === 'worksheet' || type === 'quiz' ? [
          {
            id: '1',
            type: 'mcq' as const,
            question: 'What is 2 + 2?',
            options: ['3', '4', '5', '6'],
            answer: '4',
            marks: 1,
          }
        ] : undefined,
        createdAt: new Date(),
      };

      const existingDocs = await StorageService.getDocuments();
      await StorageService.saveDocuments([...existingDocs, mockDocument]);

      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: `I've created a ${type.replace('-', ' ')} for you! You can find it in your Documents tab.`,
        isUser: false,
        timestamp: new Date(),
        documentGenerated: {
          type,
          title: mockDocument.title,
          content: mockDocument.content,
        },
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  return (
    <SafeAreaView style={styles.container}>
      <FeatureTour steps={tourSteps} visible={showTour} onFinish={handleTourFinish} />
      <View style={styles.header}>
        <View style={styles.headerContent}>
          <SahayakLogo size={32} showText={false} color="#000000" />
          <Text style={styles.headerTitle}>Ask Sahayak</Text>
        </View>
      </View>

      <KeyboardAvoidingView 
        style={styles.content}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          showsVerticalScrollIndicator={false}
          onContentSizeChange={() => {
            setTimeout(() => scrollViewRef.current?.scrollToEnd({ animated: true }), 100);
          }}
        >
          {messages.map((message) => (
            <View
              key={message.id}
              style={[
                styles.messageContainer,
                message.isUser ? styles.userMessage : styles.aiMessage,
              ]}
            >
              <View style={styles.messageHeader}>
                {message.isUser ? (
                  <User size={20} color="#000000" />
                ) : (
                  <View style={{ backgroundColor: '#fff', borderRadius: 10, padding: 2 }}>
                    <SahayakLogo size={20} showText={false} color="#000000" />
                  </View>
                )}
                <Text style={styles.messageTime}>
                  {message.timestamp.toLocaleTimeString([], {
                    hour: '2-digit',
                    minute: '2-digit',
                  })}
                </Text>
              </View>
              <Text style={[styles.messageText, message.isUser ? {color: '#000'} : {color: '#fff'}]}>{message.text}</Text>
              {message.documentGenerated && (
                <View style={styles.documentPreview}>
                  <View style={{flexDirection:'row',alignItems:'center'}}>
                    <FileText size={16} color="#000" style={{marginRight:6}} />
                    <Text style={styles.documentPreviewTitle}>{message.documentGenerated.title}</Text>
                  </View>
                  <Text style={styles.documentPreviewText}>Document saved to your library</Text>
                </View>
              )}
            </View>
          ))}

          {isTyping && (
            <View style={[styles.messageContainer, styles.aiMessage]}>
              <View style={styles.messageHeader}>
                <SahayakLogo size={20} showText={false} color="#000000" />
                <Text style={styles.messageTime}>typing...</Text>
              </View>
              <Text style={styles.typingText}>Sahayak is thinking...</Text>
            </View>
          )}
        </ScrollView>

        <View style={styles.quickActionsContainer}>
          <ScrollView horizontal showsHorizontalScrollIndicator={false}>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => generateQuickResource('worksheet')}
            >
              <View style={{flexDirection:'row',alignItems:'center'}}><BookOpen size={16} color="#000" style={{marginRight:6}} /><Text style={styles.quickActionText}>Worksheet</Text></View>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => generateQuickResource('quiz')}
            >
              <View style={{flexDirection:'row',alignItems:'center'}}><HelpCircle size={16} color="#000" style={{marginRight:6}} /><Text style={styles.quickActionText}>Quiz</Text></View>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => generateQuickResource('lesson-plan')}
            >
              <View style={{flexDirection:'row',alignItems:'center'}}><BookOpen size={16} color="#000" style={{marginRight:6}} /><Text style={styles.quickActionText}>Lesson Plan</Text></View>
            </TouchableOpacity>
            <TouchableOpacity
              style={styles.quickActionButton}
              onPress={() => generateQuickResource('story')}
            >
              <View style={{flexDirection:'row',alignItems:'center'}}><Book size={16} color="#000" style={{marginRight:6}} /><Text style={styles.quickActionText}>Story</Text></View>
            </TouchableOpacity>
          </ScrollView>
        </View>

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            placeholder="Ask Sahayak anything..."
            placeholderTextColor="#999999"
            value={inputText}
            onChangeText={setInputText}
            multiline
            maxLength={500}
          />
          <TouchableOpacity style={styles.micButton}>
            <Mic size={20} color="#000000" />
          </TouchableOpacity>
          <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>
            <Send size={20} color="#FFFFFF" />
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  header: {
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#000000',
    marginLeft: 10,
    fontFamily: 'Poppins-SemiBold',
  },
  content: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  messageContainer: {
    marginVertical: 5,
    maxWidth: '85%',
  },
  userMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderBottomRightRadius: 5,
    padding: 15,
    borderWidth: 1,
    borderColor: '#E9ECEF',
  },
  aiMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#000000',
    borderRadius: 12,
    borderBottomLeftRadius: 5,
    padding: 15,
    borderWidth: 0,
  },
  messageHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  messageTime: {
    fontSize: 12,
    color: '#999999',
    marginLeft: 5,
    fontFamily: 'Poppins-Regular',
  },
  messageText: {
    fontSize: 16,
    lineHeight: 20,
    color: '#000000', // default for user
    fontFamily: 'Poppins-Regular',
  },
  documentPreview: {
    marginTop: 10,
    padding: 10,
    backgroundColor: '#F0F0F0',
    borderRadius: 8,
  },
  documentPreviewTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000000',
    fontFamily: 'Poppins-SemiBold',
  },
  documentPreviewText: {
    fontSize: 12,
    color: '#666666',
    marginTop: 2,
    fontFamily: 'Poppins-Regular',
  },
  typingText: {
    fontSize: 16,
    color: '#999999',
    fontStyle: 'italic',
    fontFamily: 'Poppins-Regular',
  },
  quickActionsContainer: {
    paddingHorizontal: 15,
    paddingVertical: 10,
  },
  quickActionButton: {
    backgroundColor: '#F8F9FA',
    paddingHorizontal: 15,
    paddingVertical: 8,
    borderRadius: 8,
    marginRight: 10,
    borderWidth: 1,
    borderColor: '#E9ECEF',
  },
  quickActionText: {
    fontSize: 14,
    color: '#000000',
    fontWeight: '500',
    fontFamily: 'Poppins-Medium',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    paddingHorizontal: 15,
    paddingVertical: 15,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#F0F0F0',
  },
  textInput: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    paddingHorizontal: 15,
    paddingVertical: 12,
    marginRight: 10,
    maxHeight: 100,
    fontSize: 16,
    color: '#000000',
    borderWidth: 1,
    borderColor: '#E9ECEF',
    fontFamily: 'Poppins-Regular',
  },
  micButton: {
    padding: 12,
    marginRight: 5,
  },
  sendButton: {
    backgroundColor: '#000000',
    borderRadius: 12,
    padding: 12,
  },
});
